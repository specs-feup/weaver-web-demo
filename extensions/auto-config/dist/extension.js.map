{"version":3,"file":"extension.js","mappings":"23BA2BA,WAAOA,eAAwBC,GAC7B,MAAMC,EAAkBC,EAAOC,UAAUC,mBAAmB,IAAIC,IAAIC,OAEpE,IAAKL,EAEH,YADAC,EAAOK,OAAOC,iBAAiB,8BAIjC,MAAMC,EAAYC,EAAKC,QAAQV,EAAiB,MAC1CW,EAAwBF,EAAKG,KAAKJ,EAAW,UAAW,kCACxDK,EAAmBJ,EAAKG,KAAKJ,EAAW,UAAW,mCAEnDM,EAAsBH,EAAuBV,EAAOc,oBAAoBC,iBACxEF,EAAsBD,EAAkBZ,EAAOc,oBAAoBE,OAC3E,EAzCA,kBACA,YACA,YAEAnB,eAAegB,EAAsBI,EAAkBC,GACrD,GAAKC,EAAGC,WAAWH,GAKnB,IACE,MAAMI,EAAMF,EAAGG,aAAaL,EAAU,SAChCM,EAAiBC,KAAKC,MAAMJ,GAElC,IAAK,MAAOK,EAAKC,KAAUC,OAAOC,QAAQN,GACtBvB,EAAOC,UAAU6B,mBAAmBC,QAAQL,SAKxD1B,EAAOC,UAAU6B,mBAAmBE,OAAON,EAAKC,EAAOT,GAH3De,QAAQC,KAAK,8BAA8BR,IAKjD,CAAE,MAAOS,GACPnC,EAAOK,OAAOC,iBAAiB,iCAAiCW,MAAakB,IAC/E,MAlBEF,QAAQC,KAAK,4BAA4BjB,IAmB7C,C,UCzBAmB,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,K,UCAzBF,EAAOC,QAAUC,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://auto-config/./src/extension.ts","webpack://auto-config/external commonjs \"vscode\"","webpack://auto-config/external node-commonjs \"fs\"","webpack://auto-config/external node-commonjs \"path\"","webpack://auto-config/webpack/bootstrap","webpack://auto-config/webpack/startup"],"sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs';\nimport * as vscode from 'vscode';\n\nasync function applySettingsFromFile(filePath: string, target: vscode.ConfigurationTarget) {\n  if (!fs.existsSync(filePath)) {\n    console.warn(`Settings file not found: ${filePath}`);\n    return;\n  }\n\n  try {\n    const raw = fs.readFileSync(filePath, 'utf-8');\n    const customSettings = JSON.parse(raw);\n\n    for (const [key, value] of Object.entries(customSettings)) {\n      const inspected = vscode.workspace.getConfiguration().inspect(key);\n      if (!inspected) {\n        console.warn(`Skipping unregistered key: ${key}`);\n        continue;\n      }\n      await vscode.workspace.getConfiguration().update(key, value, target);\n    }\n  } catch (err) {\n    vscode.window.showErrorMessage(`Failed to apply settings from ${filePath}: ${err}`);\n  }\n}\n\nexport async function activate(context: vscode.ExtensionContext) {\n  const workspaceFolder = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;\n\n  if (!workspaceFolder) {\n    vscode.window.showErrorMessage('No workspace folder found.');\n    return;\n  }\n\n  const parentDir = path.resolve(workspaceFolder, '..');\n  const workspaceSettingsPath = path.join(parentDir, '.vscode', 'custom-workplace-settings.json');\n  const userSettingsPath = path.join(parentDir, '.vscode', 'custom-user-settings.json');\n\n  await applySettingsFromFile(workspaceSettingsPath, vscode.ConfigurationTarget.Workspace);\n  await applySettingsFromFile(userSettingsPath, vscode.ConfigurationTarget.Global);\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["async","context","workspaceFolder","vscode","workspace","workspaceFolders","uri","fsPath","window","showErrorMessage","parentDir","path","resolve","workspaceSettingsPath","join","userSettingsPath","applySettingsFromFile","ConfigurationTarget","Workspace","Global","filePath","target","fs","existsSync","raw","readFileSync","customSettings","JSON","parse","key","value","Object","entries","getConfiguration","inspect","update","console","warn","err","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}