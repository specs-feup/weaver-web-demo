{"version":3,"file":"extension.js","mappings":"23BAMA,WAAOA,eAAwBC,GAC3BC,QAAQC,IAAI,qCAEZ,MAAMC,EAAkBC,EAAOC,UAAUC,mBAAmB,GAEtDC,EAAO,CACTH,EAAOI,IAAIC,SAASN,EAAiBO,IAAK,mBAC1CN,EAAOI,IAAIC,SAASN,EAAiBO,IAAK,aAC1CN,EAAOI,IAAIC,SAASN,EAAiBO,IAAK,cAC1CN,EAAOI,IAAIC,SAASN,EAAiBO,IAAK,kBAIxCC,EAAaJ,GAEnB,MAAMK,EAAaR,EAAOS,SAASC,gBAAgB,WAAYf,gBACrDY,EAAaJ,KAEvBP,EAAQe,cAAcC,KAAKJ,EAC/B,EAwCA,wBAA8B,EA/D9B,kBAyBAb,eAAeY,EAAaM,SAGlBb,EAAOS,SAASK,eAAe,yCAG/Bd,EAAOS,SAASK,eAAe,wCAG/Bd,EAAOS,SAASK,eAAe,2CAGlCd,EAAOS,SAASK,eAAe,gDAC5Bd,EAAOS,SAASK,eAAe,oCAIrC,MAAMC,EAAe,CAEjB,CAAEC,MAAOhB,EAAOiB,WAAWC,IAAKC,KAAMN,EAAU,IAChD,CAAEG,MAAOhB,EAAOiB,WAAWG,IAAKD,KAAMN,EAAU,IAChD,CAAEG,MAAOhB,EAAOiB,WAAWI,MAAOF,KAAMN,EAAU,IAClD,CAAEG,MAAOhB,EAAOiB,WAAWK,KAAMH,KAAMN,EAAU,KAMrD,IAAK,MAAMU,KAAQR,EAAc,CAC7B,MAAMS,QAAiBxB,EAAOC,UAAUwB,iBAAiBF,EAAKJ,YACxDnB,EAAO0B,OAAOC,iBAAiBH,EAAU,CAC3CI,WAAYL,EAAKP,MACjBa,SAAS,GAEjB,CACJ,C,UC9DAC,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,CAAC,GAOX,OAHAQ,EAAoBH,GAAUI,KAAKV,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,OACf,CCnB0BI,CAAoB,K","sources":["webpack://layout-builder/./src/extension.ts","webpack://layout-builder/external commonjs \"vscode\"","webpack://layout-builder/webpack/bootstrap","webpack://layout-builder/webpack/startup"],"sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport async function activate(context: vscode.ExtensionContext) {\n    console.log('Extension \"layout-builder\" active');\n\n    const workspaceFolder = vscode.workspace.workspaceFolders?.[0];\n\n    const uris = [\n        vscode.Uri.joinPath(workspaceFolder!.uri, 'input/input.cpp'),\n        vscode.Uri.joinPath(workspaceFolder!.uri, 'script.js'),\n        vscode.Uri.joinPath(workspaceFolder!.uri, 'result.cpp'),\n        vscode.Uri.joinPath(workspaceFolder!.uri, 'log.txt')\n    ];\n\n    // Assemble the 2x2 grid\n    await setup2x2Grid(uris);\n\n    const disposable = vscode.commands.registerCommand('2x2-grid', async () => {\n        await setup2x2Grid(uris);\n    });\n    context.subscriptions.push(disposable);\n}\n\nasync function setup2x2Grid(filePaths: vscode.Uri[]): Promise<void> {\n\n\t// Close all existing editor groups first\n    await vscode.commands.executeCommand('workbench.action.closeAllGroups');\n\n\t// First, split horizontally to create top and bottom rows\n    await vscode.commands.executeCommand('workbench.action.splitEditorUp');\n\n\t// Go to top group and split vertically to create top-left and top-right\n    await vscode.commands.executeCommand('workbench.action.splitEditorRight');\n\n    // Go to bottom group and split vertically to create bottom-left and bottom-right\n\tawait vscode.commands.executeCommand('workbench.action.focusThirdEditorGroup');\n    await vscode.commands.executeCommand('workbench.action.splitEditorLeft');\n\n    // Open files in each group\n\n    const editorGroups = [\n\n        { group: vscode.ViewColumn.One, file: filePaths[0] },      // Top-left\n        { group: vscode.ViewColumn.Two, file: filePaths[1] },      // Top-right\n        { group: vscode.ViewColumn.Three, file: filePaths[2] },    // Bottom-left\n        { group: vscode.ViewColumn.Four, file: filePaths[3] }      // Bottom-right\n    ];\n\n\n\n    // Open each file in its respective group\n    for (const item of editorGroups) {\n        const document = await vscode.workspace.openTextDocument(item.file);\n        await vscode.window.showTextDocument(document, {\n            viewColumn: item.group,\n            preview: false\n        });\n    }\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["async","context","console","log","workspaceFolder","vscode","workspace","workspaceFolders","uris","Uri","joinPath","uri","setup2x2Grid","disposable","commands","registerCommand","subscriptions","push","filePaths","executeCommand","editorGroups","group","ViewColumn","One","file","Two","Three","Four","item","document","openTextDocument","window","showTextDocument","viewColumn","preview","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call"],"sourceRoot":""}